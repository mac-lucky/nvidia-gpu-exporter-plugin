Menu="Utilities"
Title="NVIDIA GPU Exporter"
Icon="nvidia_gpu_exporter.png"
---
<?php
$plugin_name = "nvidia_gpu_exporter";
$binary_path = "/usr/local/bin/nvidia_gpu_exporter";
$pid_file = "/var/run/nvidia_gpu_exporter/nvidia_gpu_exporter.pid";
$log_file = "/var/log/nvidia_gpu_exporter/nvidia_gpu_exporter.log";
$config_file = "/boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg";

// Load configuration
$config = [];
if (file_exists($config_file)) {
    $config = parse_ini_file($config_file);
}

$listen_address = $config['listen_address'] ?? '0.0.0.0:9835';
$metrics_path = $config['metrics_path'] ?? '/metrics';
$log_level = $config['log_level'] ?? 'info';

// Check if service is running
function is_service_running() {
    global $pid_file;
    if (!file_exists($pid_file)) {
        return false;
    }
    $pid = trim(file_get_contents($pid_file));
    return !empty($pid) && file_exists("/proc/$pid");
}

// Get service status
$service_running = is_service_running();
$status_text = $service_running ? "Running" : "Stopped";
$status_color = $service_running ? "green" : "red";

// Check if binary exists
$binary_exists = file_exists($binary_path);
$binary_status = $binary_exists ? "Installed" : "Not Found";
$binary_color = $binary_exists ? "green" : "red";

// Get latest version info
$latest_version = "1.3.2"; // Will be updated dynamically in real implementation

?>

<style>
.status-box {
    display: inline-block;
    padding: 5px 10px;
    border-radius: 3px;
    color: white;
    font-weight: bold;
    margin: 5px;
}
.status-running { background-color: green; }
.status-stopped { background-color: red; }
.status-installed { background-color: green; }
.status-missing { background-color: red; }
.control-button {
    margin: 5px;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: bold;
}
.btn-start { background-color: #4CAF50; color: white; }
.btn-stop { background-color: #f44336; color: white; }
.btn-restart { background-color: #ff9800; color: white; }
.btn-install { background-color: #2196F3; color: white; }
.btn-download { background-color: #9C27B0; color: white; }
.config-section {
    margin: 20px 0;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f9f9f9;
}
</style>

<script>
function executeAction(action) {
    if (action === 'stop' && !confirm('Are you sure you want to stop NVIDIA GPU Exporter?')) {
        return;
    }
    if (action === 'restart' && !confirm('Are you sure you want to restart NVIDIA GPU Exporter?')) {
        return;
    }
    
    var xhr = new XMLHttpRequest();
    xhr.open('POST', '/plugins/nvidia_gpu_exporter/include/exec.php', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                // Reload page after action
                setTimeout(function() {
                    location.reload();
                }, 1000);
            } else {
                alert('Error executing action: ' + action);
            }
        }
    };
    xhr.send('action=' + action);
}

function saveConfig() {
    var listen_address = document.getElementById('listen_address').value;
    var metrics_path = document.getElementById('metrics_path').value;
    var log_level = document.getElementById('log_level').value;
    
    var xhr = new XMLHttpRequest();
    xhr.open('POST', '/plugins/nvidia_gpu_exporter/include/save_config.php', true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
            if (xhr.status === 200) {
                alert('Configuration saved successfully!');
            } else {
                alert('Error saving configuration');
            }
        }
    };
    xhr.send('listen_address=' + encodeURIComponent(listen_address) + 
             '&metrics_path=' + encodeURIComponent(metrics_path) + 
             '&log_level=' + encodeURIComponent(log_level));
}
</script>

<div>
    <h2>NVIDIA GPU Exporter</h2>
    <p>Prometheus exporter for NVIDIA GPU metrics using nvidia-ml-py bindings.</p>
    
    <div class="config-section">
        <h3>Service Status</h3>
        <div>
            <span>Binary Status: </span>
            <span class="status-box status-<?php echo $binary_exists ? 'installed' : 'missing'; ?>">
                <?php echo $binary_status; ?>
            </span>
        </div>
        <div>
            <span>Service Status: </span>
            <span class="status-box status-<?php echo $service_running ? 'running' : 'stopped'; ?>">
                <?php echo $status_text; ?>
            </span>
        </div>
        <?php if ($service_running): ?>
        <div>
            <span>Metrics URL: </span>
            <a href="http://<?php echo $_SERVER['SERVER_ADDR']; ?>:<?php echo explode(':', $listen_address)[1] ?? '9835'; ?><?php echo $metrics_path; ?>" target="_blank">
                http://<?php echo $_SERVER['SERVER_ADDR']; ?>:<?php echo explode(':', $listen_address)[1] ?? '9835'; ?><?php echo $metrics_path; ?>
            </a>
        </div>
        <?php endif; ?>
    </div>

    <div class="config-section">
        <h3>Service Controls</h3>
        <?php if (!$binary_exists): ?>
            <button class="control-button btn-download" onclick="executeAction('download')">Download & Install Binary</button>
        <?php else: ?>
            <?php if (!$service_running): ?>
                <button class="control-button btn-start" onclick="executeAction('start')">Start</button>
            <?php else: ?>
                <button class="control-button btn-stop" onclick="executeAction('stop')">Stop</button>
            <?php endif; ?>
            <button class="control-button btn-restart" onclick="executeAction('restart')">Restart</button>
            <button class="control-button btn-download" onclick="executeAction('update')">Update Binary</button>
        <?php endif; ?>
    </div>

    <div class="config-section">
        <h3>Configuration</h3>
        <form onsubmit="saveConfig(); return false;">
            <table>
                <tr>
                    <td>Listen Address:</td>
                    <td><input type="text" id="listen_address" value="<?php echo htmlspecialchars($listen_address); ?>" style="width: 200px;"></td>
                    <td><em>Format: IP:PORT (e.g., 0.0.0.0:9835)</em></td>
                </tr>
                <tr>
                    <td>Metrics Path:</td>
                    <td><input type="text" id="metrics_path" value="<?php echo htmlspecialchars($metrics_path); ?>" style="width: 200px;"></td>
                    <td><em>URL path for metrics endpoint</em></td>
                </tr>
                <tr>
                    <td>Log Level:</td>
                    <td>
                        <select id="log_level" style="width: 200px;">
                            <option value="debug" <?php echo $log_level === 'debug' ? 'selected' : ''; ?>>Debug</option>
                            <option value="info" <?php echo $log_level === 'info' ? 'selected' : ''; ?>>Info</option>
                            <option value="warn" <?php echo $log_level === 'warn' ? 'selected' : ''; ?>>Warning</option>
                            <option value="error" <?php echo $log_level === 'error' ? 'selected' : ''; ?>>Error</option>
                        </select>
                    </td>
                    <td><em>Logging verbosity level</em></td>
                </tr>
                <tr>
                    <td colspan="3" style="text-align: center; padding-top: 10px;">
                        <button type="submit" class="control-button btn-install">Save Configuration</button>
                    </td>
                </tr>
            </table>
        </form>
    </div>

    <?php if (file_exists($log_file)): ?>
    <div class="config-section">
        <h3>Recent Log Output</h3>
        <textarea readonly style="width: 100%; height: 200px; font-family: monospace; background-color: #000; color: #0f0;">
<?php echo htmlspecialchars(shell_exec("tail -20 $log_file 2>/dev/null || echo 'No log output available'")); ?>
        </textarea>
    </div>
    <?php endif; ?>

    <div class="config-section">
        <h3>About</h3>
        <p><strong>NVIDIA GPU Exporter Plugin</strong></p>
        <p>Version: <?php echo $latest_version; ?></p>
        <p>This plugin provides a Prometheus exporter for NVIDIA GPU metrics.</p>
        <p>Source: <a href="https://github.com/utkuozdemir/nvidia_gpu_exporter" target="_blank">github.com/utkuozdemir/nvidia_gpu_exporter</a></p>
        <p>Plugin Repository: <a href="https://github.com/mac-lucky/nvidia-gpu-exporter-plugin" target="_blank">github.com/mac-lucky/nvidia-gpu-exporter-plugin</a></p>
    </div>
</div>
