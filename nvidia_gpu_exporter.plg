<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name      "nvidia_gpu_exporter">
<!ENTITY author    "mac-lucky">
<!ENTITY version   "1.3.2">
<!ENTITY md5       "18fda6e8b4f2efda39523bc75d1410f6">
<!ENTITY launch    "Settings/NvidiaGpuExporter">
<!ENTITY gitURL    "https://raw.githubusercontent.com/mac-lucky/nvidia-gpu-exporter-plugin/main">
<!ENTITY pluginURL "&gitURL;/nvidia_gpu_exporter.plg">
<!ENTITY binURL    "https://github.com/utkuozdemir/nvidia_gpu_exporter/releases/download/v&version;/nvidia_gpu_exporter_&version;_linux_x86_64.tar.gz">
<!ENTITY pkgNAME   "&name;-&version;">
<!ENTITY bindir    "/usr/local/bin">
<!ENTITY service   "nvidia-gpu-exporter">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.11.0" support="https://github.com/mac-lucky/nvidia-gpu-exporter-plugin">

<CHANGES>

###2025.08.16a
- Fixed service start error message appearing when service actually starts successfully
- Improved service control logic to properly handle cases where service is already running
- Enhanced error handling and user feedback in web interface
- Added better logging and debugging information in start script
- Improved JavaScript error handling and user experience

###2025.08.16
- Initial release of nvidia_gpu_exporter plugin for Unraid
- Supports NVIDIA GPU monitoring via Prometheus metrics
- Provides start/stop/restart controls with web interface
- Automatic service management and autostart functionality
- Uses latest nvidia_gpu_exporter v1.3.2
- Includes comprehensive system status checking
- Web interface shows GPU availability and count

</CHANGES>

<!--
NVIDIA GPU Exporter Plugin for Unraid

This plugin provides the nvidia_gpu_exporter service for monitoring NVIDIA GPUs on Unraid systems.
The nvidia_gpu_exporter exports GPU metrics in Prometheus format, making it suitable for monitoring
GPU performance, temperature, memory usage, power consumption, and other vital statistics.

Features:
- Easy installation and management via Unraid web interface
- Configurable port and bind address
- Automatic startup support
- Start/Stop/Restart controls
- Real-time status monitoring
- GPU detection and validation
- Metrics available at http://SERVER_IP:9835/metrics

Requirements:
- NVIDIA GPU(s) installed in the system
- NVIDIA drivers properly installed
- Unraid 6.11.0 or later

Source: https://github.com/utkuozdemir/nvidia_gpu_exporter
Plugin Repository: https://github.com/mac-lucky/nvidia-gpu-exporter-plugin
-->

<!-- INSTALL SCRIPT -->
<FILE Run="/usr/bin/php">
<INLINE>
<![CDATA[
<?php
  $version = "&version;";
  $docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
  $translations = file_exists("$docroot/webGui/include/Translations.php");
  if ($translations) {
    $_SERVER['REQUEST_URI'] = 'nvidia_gpu_exporter';
    require_once "$docroot/webGui/include/Translations.php";
  } else {
    function _($text) { return $text; }
  }
  $nvidia_gpu_exporter_cfg = parse_ini_file('/boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg', true);
  $nvidia_gpu_exporter_installed = file_exists('/var/log/plugins/nvidia_gpu_exporter') ? parse_ini_file('/var/log/plugins/nvidia_gpu_exporter', true) : [];
  if (version_compare($nvidia_gpu_exporter_installed['PACKAGE'], $version, '>=')) {
    echo "Latest nvidia_gpu_exporter already installed. Exiting...\n";
    exit(0);
  }
?>
]]>
</INLINE>
</FILE>

<!-- PRE-INSTALL SCRIPT -->
<FILE Run="/bin/bash">
<INLINE>
<![CDATA[
# Create plugin directory structure
mkdir -p /boot/config/plugins/nvidia_gpu_exporter
mkdir -p /usr/local/emhttp/plugins/nvidia_gpu_exporter/images
mkdir -p /var/log/plugins

# Stop any existing service
if pgrep nvidia_gpu_exporter > /dev/null; then
  echo "Stopping existing nvidia_gpu_exporter service..."
  pkill nvidia_gpu_exporter
fi

# Remove old binary if it exists
rm -f /usr/local/bin/nvidia_gpu_exporter
]]>
</INLINE>
</FILE>

<!-- BINARY DOWNLOAD AND INSTALL -->
<FILE Name="/tmp/nvidia_gpu_exporter.tar.gz" Run="upgradepkg --install-new">
<URL>&binURL;</URL>
<MD5>&md5;</MD5>
</FILE>

<!-- EXTRACT BINARY -->
<FILE Run="/bin/bash">
<INLINE>
<![CDATA[
cd /tmp
tar -xzf nvidia_gpu_exporter.tar.gz
cp nvidia_gpu_exporter /usr/local/bin/
chmod +x /usr/local/bin/nvidia_gpu_exporter
rm -f nvidia_gpu_exporter.tar.gz nvidia_gpu_exporter
]]>
</INLINE>
</FILE>

<!-- PLUGIN ICON -->
<FILE Name="/usr/local/emhttp/plugins/nvidia_gpu_exporter/images/nvidia_exporter.png">
<URL>&gitURL;/nvidia_exporter.png</URL>
</FILE>

<!-- PLUGIN WEB INTERFACE -->
<FILE Name="/usr/local/emhttp/plugins/nvidia_gpu_exporter/NvidiaGpuExporter.page">
<INLINE>
<![CDATA[
Menu="NetworkServices"
Title="NVIDIA GPU Exporter"
Icon="nvidia_exporter.png"
---
<?PHP
$plugin = "nvidia_gpu_exporter";
$service = "nvidia-gpu-exporter";
$cfg = parse_ini_file("/boot/config/plugins/$plugin/$plugin.cfg");
$var = parse_ini_file("/var/local/emhttp/var.ini");

// Service status
$isRunning = !empty(trim(shell_exec('pgrep -f "/usr/local/bin/nvidia_gpu_exporter"')));
$port = $cfg['PORT'] ?: '9835';
$bind_address = $cfg['BIND_ADDRESS'] ?: '0.0.0.0';
$autostart = $cfg['AUTOSTART'] ?: 'yes';
$web_listen_address = $bind_address . ':' . $port;

// Check if nvidia-smi is available
$nvidiaSmi = trim(shell_exec("which nvidia-smi 2>/dev/null"));
$nvidiaAvailable = !empty($nvidiaSmi) && is_executable($nvidiaSmi);
$gpuCount = 0;
if ($nvidiaAvailable) {
    $gpuCount = intval(trim(shell_exec("nvidia-smi --list-gpus 2>/dev/null | wc -l")));
}
?>

<script>
$(function() {
  // Service control functions
  function serviceControl(action) {
    $('#wait_' + action).show();
    $('#btn' + action.charAt(0).toUpperCase() + action.slice(1)).prop('disabled', true);
    
    $.post('/plugins/nvidia_gpu_exporter/include/service.php', {action: action}, function(data) {
      $('#wait_' + action).hide();
      $('#btn' + action.charAt(0).toUpperCase() + action.slice(1)).prop('disabled', false);
      
      if (data.success) {
        // Show success message briefly
        if (data.message && data.message !== 'Success') {
          setTimeout(function() {
            $('#wait_' + action).text(data.message).show();
            setTimeout(function() { $('#wait_' + action).hide().text('Please wait...'); }, 2000);
          }, 100);
        }
        setTimeout(function() { location.reload(); }, 1500);
      } else {
        alert('Error: ' + (data.message || 'Unknown error'));
      }
    }, 'json').fail(function() {
      $('#wait_' + action).hide();
      $('#btn' + action.charAt(0).toUpperCase() + action.slice(1)).prop('disabled', false);
      alert('Error: Failed to communicate with server');
    });
  }
  
  $('#btnStart').click(function() { serviceControl('start'); });
  $('#btnStop').click(function() { serviceControl('stop'); });
  $('#btnRestart').click(function() { serviceControl('restart'); });
  
  // Apply settings
  $('#btnApply').click(function() {
    $('#wait_apply').show();
    $('#btnApply').prop('disabled', true);
    
    $.post('/plugins/nvidia_gpu_exporter/include/update.php', $('#settings_form').serialize(), function(data) {
      $('#wait_apply').hide();
      $('#btnApply').prop('disabled', false);
      
      if (data.success) {
        setTimeout(function() { location.reload(); }, 1000);
      } else {
        alert('Error: ' + (data.message || 'Unknown error'));
      }
    }, 'json').fail(function() {
      $('#wait_apply').hide();
      $('#btnApply').prop('disabled', false);
      alert('Error: Failed to save settings');
    });
  });
});
</script>

<form id="settings_form" markdown="1">
Service status:
: <span class="<?=$isRunning ? 'green-text' : 'red-text'?>"><?=$isRunning ? 'RUNNING' : 'STOPPED'?></span>

NVIDIA Status:
: <span class="<?=$nvidiaAvailable ? 'green-text' : 'red-text'?>"><?=$nvidiaAvailable ? "Available ({$gpuCount} GPU" . ($gpuCount != 1 ? 's' : '') . ")" : 'Not Available'?></span>

Port:
: <input type="number" name="PORT" value="<?=$port?>" min="1" max="65535" style="width:80px">

Bind Address:
: <input type="text" name="BIND_ADDRESS" value="<?=$bind_address?>" placeholder="0.0.0.0" style="width:120px">

Autostart:
: <select name="AUTOSTART" style="width:80px">
  <option value="yes" <?=$autostart == 'yes' ? 'selected' : ''?>>Yes</option>
  <option value="no" <?=$autostart == 'no' ? 'selected' : ''?>>No</option>
  </select>

&nbsp;
: <input type="button" id="btnApply" value="Apply"><span id="wait_apply" class="status vhidden">Please wait...</span>

&nbsp;
: <input type="button" id="btnStart" value="Start" <?=$isRunning ? 'disabled' : ''?>><span id="wait_start" class="status vhidden">Please wait...</span>
  <input type="button" id="btnStop" value="Stop" <?=$isRunning ? '' : 'disabled'?>><span id="wait_stop" class="status vhidden">Please wait...</span>
  <input type="button" id="btnRestart" value="Restart" <?=$isRunning ? '' : 'disabled'?>><span id="wait_restart" class="status vhidden">Please wait...</span>

<?if ($isRunning):?>
Metrics URL:
: <a href="http://<?=$var['NAME']?>:<?=$port?>/metrics" target="_blank">http://<?=$var['NAME']?>:<?=$port?>/metrics</a>
<?endif;?>

</form>

<blockquote class="inline_help">
<p><b>NVIDIA GPU Exporter</b></p>
<p>This plugin provides GPU monitoring metrics for NVIDIA GPUs using the nvidia_gpu_exporter service.</p>
<p>The service exposes metrics at <code>/metrics</code> endpoint which can be scraped by Prometheus or other monitoring systems.</p>
<p><b>Default Port:</b> 9835</p>
<p><b>Requirements:</b></p>
<ul>
<li>NVIDIA GPU(s) installed</li>
<li>NVIDIA drivers installed</li>
<li>nvidia-ml-py available (usually included with Unraid NVIDIA plugin)</li>
</ul>
<p><b>Available Metrics:</b></p>
<ul>
<li>GPU temperature, fan speed, power usage</li>
<li>Memory usage (used/free/total)</li>
<li>GPU utilization percentage</li>
<li>Driver version and CUDA version</li>
<li>Performance state and throttle reasons</li>
</ul>
<p><b>Version:</b> &version;</p>
</blockquote>
]]>
</INLINE>
</FILE>

<!-- SERVICE CONTROL SCRIPT -->
<FILE Name="/usr/local/emhttp/plugins/nvidia_gpu_exporter/include/service.php">
<INLINE>
<![CDATA[
<?php
require_once '/usr/local/emhttp/webGui/include/Helpers.php';

$action = $_POST['action'] ?? '';
$response = ['success' => false, 'message' => ''];

switch ($action) {
    case 'start':
        $result = startService();
        break;
    case 'stop':
        $result = stopService();
        break;
    case 'restart':
        stopService();
        sleep(2);
        $result = startService();
        break;
    default:
        $response['message'] = 'Invalid action';
        echo json_encode($response);
        exit;
}

$response['success'] = $result['success'];
$response['message'] = $result['message'];
echo json_encode($response);

function isServiceRunning() {
    // More robust process detection - check for exact binary
    $result = trim(shell_exec('pgrep -f nvidia_gpu_exporter'));
    return !empty($result);
}

function startService() {
    // Check if already running before attempting to start
    if (isServiceRunning()) {
        return ['success' => true, 'message' => 'Service is already running'];
    }
    
    $output = shell_exec('/usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/start 2>&1');
    
    // Give it time to start and verify multiple times
    for ($i = 0; $i < 6; $i++) {
        sleep(1);
        if (isServiceRunning()) {
            return ['success' => true, 'message' => 'Service started successfully'];
        }
    }
    
    // If we get here, service failed to start
    $logOutput = '';
    if (file_exists('/var/log/nvidia_gpu_exporter.log')) {
        $logOutput = "\nLog: " . trim(shell_exec('tail -3 /var/log/nvidia_gpu_exporter.log 2>/dev/null'));
    }
    
    return ['success' => false, 'message' => 'Failed to start service: ' . trim($output) . $logOutput];
}

function stopService() {
    if (!isServiceRunning()) {
        return ['success' => true, 'message' => 'Service is already stopped'];
    }
    
    $output = shell_exec('/usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/stop 2>&1');
    
    // Give it time to stop and verify
    for ($i = 0; $i < 5; $i++) {
        sleep(1);
        if (!isServiceRunning()) {
            return ['success' => true, 'message' => 'Service stopped successfully'];
        }
    }
    
    return ['success' => false, 'message' => 'Failed to stop service: ' . trim($output)];
}
?>
]]>
</INLINE>
</FILE>

<!-- SETTINGS UPDATE SCRIPT -->
<FILE Name="/usr/local/emhttp/plugins/nvidia_gpu_exporter/include/update.php">
<INLINE>
<![CDATA[
<?php
$cfg_file = '/boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg';
$port = intval($_POST['PORT'] ?? 9835);
$bind_address = $_POST['BIND_ADDRESS'] ?? '0.0.0.0';
$autostart = $_POST['AUTOSTART'] ?? 'yes';

// Validate port
if ($port < 1 || $port > 65535) {
    echo json_encode(['success' => false, 'message' => 'Invalid port number']);
    exit;
}

// Validate bind address (basic validation)
if (!filter_var($bind_address, FILTER_VALIDATE_IP) && $bind_address !== '0.0.0.0') {
    echo json_encode(['success' => false, 'message' => 'Invalid bind address']);
    exit;
}

$cfg_content = "[settings]\n";
$cfg_content .= "PORT=\"{$port}\"\n";
$cfg_content .= "BIND_ADDRESS=\"{$bind_address}\"\n";
$cfg_content .= "AUTOSTART=\"{$autostart}\"\n";

if (file_put_contents($cfg_file, $cfg_content)) {
    echo json_encode(['success' => true, 'message' => 'Settings saved']);
} else {
    echo json_encode(['success' => false, 'message' => 'Failed to save settings']);
}
?>
]]>
</INLINE>
</FILE>

<!-- DEFAULT CONFIGURATION -->
<FILE Name="/boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg">
<INLINE>
<![CDATA[
[settings]
PORT="9835"
BIND_ADDRESS="0.0.0.0"
AUTOSTART="yes"
]]>
</INLINE>
</FILE>

<!-- AUTOSTART SCRIPT -->
<FILE Name="/usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/start">
<INLINE>
<![CDATA[
#!/bin/bash
# Start nvidia_gpu_exporter service

source /boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg 2>/dev/null

PORT=${PORT:-9835}
BIND_ADDRESS=${BIND_ADDRESS:-0.0.0.0}

# Check if already running
if pgrep nvidia_gpu_exporter > /dev/null; then
    echo "nvidia_gpu_exporter is already running"
    exit 0  # Changed from exit 1 to exit 0 since this is not an error
fi

# Check if nvidia-smi is available
if ! command -v nvidia-smi >/dev/null 2>&1; then
    echo "Error: nvidia-smi not found. Please install NVIDIA drivers."
    exit 1
fi

# Start the service
echo "Starting nvidia_gpu_exporter on ${BIND_ADDRESS}:${PORT}"
/usr/local/bin/nvidia_gpu_exporter --web.listen-address="${BIND_ADDRESS}:${PORT}" > /var/log/nvidia_gpu_exporter.log 2>&1 &

# Give it a moment to start
sleep 1

# Check if it started successfully
if pgrep nvidia_gpu_exporter > /dev/null; then
    echo "nvidia_gpu_exporter started successfully"
    exit 0
else
    echo "Failed to start nvidia_gpu_exporter"
    # Show last few lines of log for debugging
    if [ -f /var/log/nvidia_gpu_exporter.log ]; then
        echo "Last log entries:"
        tail -5 /var/log/nvidia_gpu_exporter.log
    fi
    exit 1
fi
]]>
</INLINE>
</FILE>

<!-- STOP SCRIPT -->
<FILE Name="/usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/stop">
<INLINE>
<![CDATA[
#!/bin/bash
# Stop nvidia_gpu_exporter service

if pgrep nvidia_gpu_exporter > /dev/null; then
    pkill nvidia_gpu_exporter
    echo "nvidia_gpu_exporter stopped"
else
    echo "nvidia_gpu_exporter is not running"
fi
]]>
</INLINE>
</FILE>

<!-- RC SCRIPT FOR AUTOSTART -->
<FILE Name="/usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/rc.nvidia_gpu_exporter">
<INLINE>
<![CDATA[
#!/bin/bash
# Auto-start script for nvidia_gpu_exporter

source /boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg 2>/dev/null

if [ "$AUTOSTART" = "yes" ]; then
    # Wait for system to be ready
    sleep 10
    
    # Check if nvidia-smi is available
    if command -v nvidia-smi >/dev/null 2>&1; then
        /usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/start
    else
        echo "nvidia-smi not found, skipping nvidia_gpu_exporter autostart"
    fi
fi
]]>
</INLINE>
</FILE>

<!-- POST-INSTALL SCRIPT -->
<FILE Run="/bin/bash">
<INLINE>
<![CDATA[
# Create installation log
echo "[PACKAGE]" > /var/log/plugins/nvidia_gpu_exporter
echo "PACKAGE=\"&version;\"" >> /var/log/plugins/nvidia_gpu_exporter

# Set permissions
chmod 755 /usr/local/bin/nvidia_gpu_exporter
chmod 755 /usr/local/emhttp/plugins/nvidia_gpu_exporter/include/*.php
chmod 755 /usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/*

# Setup autostart by adding to go script
if ! grep -q "nvidia_gpu_exporter" /boot/config/go 2>/dev/null; then
    echo "" >> /boot/config/go
    echo "# Start nvidia_gpu_exporter if enabled" >> /boot/config/go
    echo "/usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/rc.nvidia_gpu_exporter &" >> /boot/config/go
fi

echo "nvidia_gpu_exporter plugin installed successfully!"
echo "Access the plugin via Settings -> NVIDIA GPU Exporter"
]]>
</INLINE>
</FILE>

<!-- UNINSTALL SCRIPT -->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
<![CDATA[
# Stop service if running
pkill nvidia_gpu_exporter 2>/dev/null

# Remove binary
rm -f /usr/local/bin/nvidia_gpu_exporter

# Remove plugin files
rm -rf /usr/local/emhttp/plugins/nvidia_gpu_exporter

# Remove autostart from go script
if [ -f /boot/config/go ]; then
    sed -i '/# Start nvidia_gpu_exporter if enabled/d' /boot/config/go
    sed -i '/nvidia_gpu_exporter/d' /boot/config/go
fi

# Remove configuration (commented out to preserve user settings)
# rm -rf /boot/config/plugins/nvidia_gpu_exporter

# Remove log
rm -f /var/log/plugins/nvidia_gpu_exporter
rm -f /var/log/nvidia_gpu_exporter.log

echo "nvidia_gpu_exporter plugin uninstalled"
]]>
</INLINE>
</FILE>

</PLUGIN>