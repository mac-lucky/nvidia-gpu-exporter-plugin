<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
<!ENTITY name      "nvidia-gpu-exporter">
<!ENTITY author    "mac-lucky">
<!ENTITY version   "2025.01.18">
<!ENTITY md5       "TBD">
<!ENTITY launch    "Settings/&name;">
<!ENTITY gitURL    "https://raw.githubusercontent.com/mac-lucky/nvidia-gpu-exporter-plugin/main">
<!ENTITY pluginURL "&gitURL;/nvidia_gpu_exporter.plg">
<!ENTITY exporterVersion "1.3.2">
<!ENTITY exporterURL "https://github.com/utkuozdemir/nvidia_gpu_exporter/releases/download/v&exporterVersion;/nvidia_gpu_exporter_&exporterVersion;_linux_x86_64.tar.gz">
<!ENTITY packages  "/boot/config/plugins/&name;/packages">
<!ENTITY plugin    "/boot/config/plugins/&name;">
<!ENTITY emhttp    "/usr/local/emhttp/plugins/&name;">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.11.0">

<CHANGES>
###2025.01.18
- Initial release
- NVIDIA GPU metrics exporter for Prometheus
- Based on nvidia_gpu_exporter v1.3.2
- Web interface for configuration and control
- Service management with auto-start option
- Configurable port (default 9835)
</CHANGES>

<!--
This plugin installs and manages the NVIDIA GPU Exporter service for Unraid.
It provides Prometheus-compatible metrics for NVIDIA GPUs accessible via nvidia-smi.
-->

<FILE Run="/bin/bash">
<INLINE>
# Remove old plugin files
rm -rf &plugin; &emhttp;
</INLINE>
</FILE>

<!--
Download and install nvidia-gpu-exporter binary
-->
<FILE Name="&packages;/nvidia-gpu-exporter-&exporterVersion;.tar.gz">
<URL>&exporterURL;</URL>
</FILE>

<!--
Extract and install the binary
-->
<FILE Run="/bin/bash">
<INLINE>
# Create directories
mkdir -p &plugin;
mkdir -p &emhttp;
mkdir -p /usr/local/bin

# Extract the binary
cd /tmp
tar -xzf &packages;/nvidia-gpu-exporter-&exporterVersion;.tar.gz
cp nvidia_gpu_exporter /usr/local/bin/nvidia-gpu-exporter
chmod +x /usr/local/bin/nvidia-gpu-exporter

# Set ownership
chown root:root /usr/local/bin/nvidia-gpu-exporter

# Create default config
cat > &plugin;/nvidia-gpu-exporter.cfg &lt;&lt; 'EOF'
# NVIDIA GPU Exporter Configuration
SERVICE="disable"
PORT="9835"
AUTOSTART="yes"
EXTRA_ARGS=""
EOF

echo "NVIDIA GPU Exporter binary installed successfully"
</INLINE>
</FILE>

<!--
Install web interface files
-->
<FILE Name="&emhttp;/nvidia-gpu-exporter.page">
<INLINE>
<![CDATA[
Menu="Utilities"
Title="NVIDIA GPU Exporter"
Icon="nvidia_exporter.png"
---
<?PHP
$plugin = "nvidia-gpu-exporter";
$config_file = "/boot/config/plugins/$plugin/nvidia-gpu-exporter.cfg";

// Default configuration
$default_cfg = [
    'SERVICE' => 'disable',
    'PORT' => '9835',
    'AUTOSTART' => 'yes',
    'EXTRA_ARGS' => ''
];

// Load configuration
if (file_exists($config_file)) {
    $cfg = parse_ini_file($config_file) ?: $default_cfg;
} else {
    $cfg = $default_cfg;
}

// Merge with defaults to ensure all keys exist
$cfg = array_merge($default_cfg, $cfg);

// Validation functions
function validate_port($port) {
    return is_numeric($port) && $port >= 1024 && $port <= 65535;
}

function is_port_in_use($port) {
    $connection = @fsockopen('127.0.0.1', $port, $errno, $errstr, 1);
    if ($connection) {
        fclose($connection);
        return true;
    }
    return false;
}

function check_nvidia_smi() {
    exec('which nvidia-smi', $output, $return_code);
    return $return_code === 0;
}

function check_nvidia_gpu() {
    exec('nvidia-smi -L 2>/dev/null', $output, $return_code);
    return $return_code === 0 && count($output) > 0;
}

// Status checks
$nvidia_smi_available = check_nvidia_smi();
$nvidia_gpu_available = check_nvidia_gpu();
$port_valid = validate_port($cfg['PORT']);
$port_in_use = is_port_in_use($cfg['PORT']);
$service_running = exec('pgrep -f "nvidia-gpu-exporter" 2>/dev/null') !== '';
?>

<link type="text/css" rel="stylesheet" href="/plugins/nvidia-gpu-exporter/nvidia-gpu-exporter.css">

<div id="title">
  <span class="left">
    <img src="/plugins/nvidia-gpu-exporter/nvidia_exporter.png" class="icon">
    NVIDIA GPU Exporter
  </span>
</div>

<!-- Prerequisites Check -->
<div class="prerequisites">
  <h3>System Requirements</h3>
  <div class="status-item">
    <span class="status-label">NVIDIA SMI Available:</span>
    <span class="status-value <?= $nvidia_smi_available ? 'status-ok' : 'status-error' ?>">
      <?= $nvidia_smi_available ? '✓ Available' : '✗ Not Found' ?>
    </span>
  </div>
  <div class="status-item">
    <span class="status-label">NVIDIA GPU Detected:</span>
    <span class="status-value <?= $nvidia_gpu_available ? 'status-ok' : 'status-error' ?>">
      <?= $nvidia_gpu_available ? '✓ Detected' : '✗ Not Found' ?>
    </span>
  </div>
  <?php if (!$nvidia_smi_available || !$nvidia_gpu_available): ?>
  <div class="warning">
    <strong>Warning:</strong> NVIDIA drivers and/or GPU not detected. Please install NVIDIA drivers before using this plugin.
  </div>
  <?php endif; ?>
</div>

<form markdown="1" method="POST" action="/update.php" target="progressFrame" onsubmit="return validateForm();">
<input type="hidden" name="#file" value="nvidia-gpu-exporter/nvidia-gpu-exporter.cfg">

<h3>Service Configuration</h3>

**Service Status:**
: <select name="SERVICE" id="service" size="1" onChange="toggleServiceOptions(); checkRunning(this.form);">
  <?=mk_option($cfg['SERVICE'], "disable", "Disabled");?>
  <?=mk_option($cfg['SERVICE'], "enable", "Enabled");?>
  </select>

<div id="service-options" style="<?= $cfg['SERVICE'] === 'disable' ? 'display: none;' : '' ?>">

**Port:**
: <input type="number" name="PORT" id="port" min="1024" max="65535" value="<?=$cfg['PORT'];?>" placeholder="9835" required>
  <span id="port-status"></span>
  <br><small>Port range: 1024-65535. Default: 9835</small>

**Auto-start on Boot:**
: <select name="AUTOSTART" size="1">
  <?=mk_option($cfg['AUTOSTART'], "yes", "Yes");?>
  <?=mk_option($cfg['AUTOSTART'], "no", "No");?>
  </select>

**Additional Arguments:**
: <input type="text" name="EXTRA_ARGS" value="<?=htmlspecialchars($cfg['EXTRA_ARGS']);?>" placeholder="--log.level=debug" style="width: 300px;">
  <br><small>Optional command line arguments for nvidia-gpu-exporter</small>

</div>

<br>
<input type="submit" name="#apply" value="Apply" id="apply-btn">
<input type="button" value="Start" onclick="serviceAction('start')" id="start-btn">
<input type="button" value="Stop" onclick="serviceAction('stop')" id="stop-btn">
<input type="button" value="Restart" onclick="serviceAction('restart')" id="restart-btn">
<input type="button" value="Done" onclick="done()">
</form>

<div id="status"></div>

<script>
function validateForm() {
    const port = document.getElementById('port').value;
    const service = document.getElementById('service').value;
    
    if (service === 'enable') {
        if (!port || port < 1024 || port > 65535) {
            alert('Please enter a valid port number (1024-65535)');
            return false;
        }
    }
    
    return true;
}

function toggleServiceOptions() {
    const service = document.getElementById('service').value;
    const options = document.getElementById('service-options');
    
    if (service === 'enable') {
        options.style.display = 'block';
    } else {
        options.style.display = 'none';
    }
}

function checkPortAvailability() {
    const port = document.getElementById('port').value;
    const status = document.getElementById('port-status');
    
    if (port && port >= 1024 && port <= 65535) {
        $.post('/plugins/nvidia-gpu-exporter/nvidia-gpu-exporter.php', {
            action: 'check_port',
            port: port
        }, function(data) {
            if (data.includes('available')) {
                status.innerHTML = '<span class="status-ok">✓ Available</span>';
            } else {
                status.innerHTML = '<span class="status-error">✗ In use</span>';
            }
        });
    } else {
        status.innerHTML = '<span class="status-error">✗ Invalid</span>';
    }
}

function serviceAction(action) {
    $("#status").html('<div class="loading">Processing...</div>');
    $.post('/plugins/nvidia-gpu-exporter/nvidia-gpu-exporter.php', {
        action: action
    }, function(data) {
        $("#status").html(data);
        setTimeout(function() {
            loadStatus();
        }, 2000);
    });
}

function checkRunning(form) {
    if (form.SERVICE.value == "enable") {
        setTimeout(function() {
            serviceAction('start');
        }, 1000);
    } else {
        serviceAction('stop');
    }
}

function loadStatus() {
    $.post('/plugins/nvidia-gpu-exporter/nvidia-gpu-exporter.php', {
        action: 'status'
    }, function(data) {
        $("#status").html(data);
    });
}

function done() {
    window.location.href = '/Settings';
}

$(document).ready(function() {
    loadStatus();
    
    // Check port availability on change
    $('#port').on('input', function() {
        clearTimeout(this.delay);
        this.delay = setTimeout(function() {
            checkPortAvailability();
        }.bind(this), 500);
    });
    
    // Initial port check
    checkPortAvailability();
    
    // Toggle service options based on current selection
    toggleServiceOptions();
});
</script>
]]>
</INLINE>
</FILE>

<!--
Install PHP backend script
-->
<FILE Name="&emhttp;/nvidia-gpu-exporter.php">
<INLINE>
<![CDATA[
<?PHP
$plugin = "nvidia-gpu-exporter";
$config_file = "/boot/config/plugins/$plugin/nvidia-gpu-exporter.cfg";
$log_file = "/var/log/nvidia-gpu-exporter.log";
$binary_path = "/usr/local/bin/nvidia-gpu-exporter";

// Helper functions
function load_config() {
    global $config_file;
    $default_cfg = [
        'SERVICE' => 'disable',
        'PORT' => '9835',
        'AUTOSTART' => 'yes',
        'EXTRA_ARGS' => ''
    ];
    
    if (file_exists($config_file)) {
        $cfg = parse_ini_file($config_file) ?: $default_cfg;
    } else {
        $cfg = $default_cfg;
    }
    
    return array_merge($default_cfg, $cfg);
}

function validate_port($port) {
    return is_numeric($port) && $port >= 1024 && $port <= 65535;
}

function is_port_in_use($port) {
    $connection = @fsockopen('127.0.0.1', $port, $errno, $errstr, 1);
    if ($connection) {
        fclose($connection);
        return true;
    }
    return false;
}

function get_service_pid() {
    // Check if port is actually listening instead of relying on pgrep
    $cfg = load_config();
    $port = $cfg['PORT'];
    
    // Use netstat to check if port is listening
    $output = shell_exec("netstat -tlnp 2>/dev/null | grep \":$port \"");
    if ($output && strpos($output, "LISTEN") !== false) {
        // Extract PID from netstat output
        if (preg_match('/(\d+)\/nvidia-gpu-exporter/', $output, $matches)) {
            return intval($matches[1]);
        }
        return 1; // Port is listening but couldn't get PID
    }
    
    return 0;
}

function is_service_running() {
    return get_service_pid() > 0;
}

function get_service_status() {
    global $log_file;
    $cfg = load_config();
    $pid = get_service_pid();
    $running = $pid > 0;
    
    $status_html = "<div class='status-container'>";
    
    if ($running) {
        $status_html .= "<div class='status-item'><span class='status-label'>Status:</span> <span class='status-ok'>✓ Running</span></div>";
        $status_html .= "<div class='status-item'><span class='status-label'>PID:</span> <span class='status-value'>$pid</span></div>";
        $status_html .= "<div class='status-item'><span class='status-label'>Port:</span> <span class='status-value'>{$cfg['PORT']}</span></div>";
        
        $hostname = gethostname();
        $metrics_url = "http://$hostname:{$cfg['PORT']}/metrics";
        $status_html .= "<div class='status-item'><span class='status-label'>Metrics URL:</span> <span class='status-value'><a href='$metrics_url' target='_blank'>$metrics_url</a></span></div>";
        
        // Test connectivity
        $connection = @fsockopen('127.0.0.1', $cfg['PORT'], $errno, $errstr, 3);
        if ($connection) {
            fclose($connection);
            $status_html .= "<div class='status-item'><span class='status-label'>Connectivity:</span> <span class='status-ok'>✓ Responding</span></div>";
        } else {
            $status_html .= "<div class='status-item'><span class='status-label'>Connectivity:</span> <span class='status-error'>✗ Not responding</span></div>";
        }
    } else {
        $status_html .= "<div class='status-item'><span class='status-label'>Status:</span> <span class='status-error'>✗ Not running</span></div>";
    }
    
    $status_html .= "</div>";
    
    // Show recent log entries
    if (file_exists($log_file)) {
        $log_lines = array_slice(file($log_file, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES), -10);
        if (!empty($log_lines)) {
            $status_html .= "<div class='log-container'>";
            $status_html .= "<h4>Recent Log Entries:</h4>";
            $status_html .= "<pre class='log-content'>";
            foreach ($log_lines as $line) {
                $status_html .= htmlspecialchars($line) . "\n";
            }
            $status_html .= "</pre>";
            $status_html .= "</div>";
        }
    }
    
    return $status_html;
}

// Handle AJAX requests
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $action = $_POST['action'] ?? '';
    
    switch ($action) {
        case 'start':
            echo shell_exec("/usr/local/emhttp/plugins/$plugin/scripts/start 2>&1");
            break;
            
        case 'stop':
            echo shell_exec("/usr/local/emhttp/plugins/$plugin/scripts/stop 2>&1");
            break;
            
        case 'restart':
            echo shell_exec("/usr/local/emhttp/plugins/$plugin/scripts/stop 2>&1");
            sleep(1);
            echo shell_exec("/usr/local/emhttp/plugins/$plugin/scripts/start 2>&1");
            break;
            
        case 'status':
            echo get_service_status();
            break;
            
        case 'check_port':
            $port = $_POST['port'] ?? '';
            if (validate_port($port)) {
                if (is_port_in_use($port)) {
                    echo "Port $port is in use";
                } else {
                    echo "Port $port is available";
                }
            } else {
                echo "Invalid port";
            }
            break;
            
        default:
            echo "Invalid action: $action";
    }
} else {
    // Default response for non-POST requests
    echo get_service_status();
}
?>
]]>
</INLINE>
</FILE>

<!--
Install service control scripts
-->
<FILE Name="&emhttp;/scripts/start" Mode="0755">
<INLINE>
#!/bin/bash
plugin="nvidia-gpu-exporter"
cfg="/boot/config/plugins/$plugin/nvidia-gpu-exporter.cfg"

if [ -f "$cfg" ]; then
  source "$cfg"
else
  echo "Configuration file not found"
  exit 1
fi

if [ "$SERVICE" = "enable" ]; then
  # Clean up any stale log
  > /var/log/nvidia-gpu-exporter.log
  
  # Check if port is already in use
  if netstat -tlnp 2>/dev/null | grep ":$PORT " > /dev/null; then
    echo "Port $PORT is already in use"
    exit 1
  fi
  
  # Kill any existing processes (cleanup)
  pkill -f nvidia-gpu-exporter 2>/dev/null || true
  sleep 1
  
  echo "Starting NVIDIA GPU Exporter on port $PORT..."
  
  # Ensure binary exists and is executable
  if [ ! -f "/usr/local/bin/nvidia-gpu-exporter" ]; then
    echo "ERROR: nvidia-gpu-exporter binary not found at /usr/local/bin/nvidia-gpu-exporter"
    exit 1
  fi
  
  chmod +x /usr/local/bin/nvidia-gpu-exporter
  
  # Test binary first
  /usr/local/bin/nvidia-gpu-exporter --help > /dev/null 2>&amp;1
  if [ $? -ne 0 ]; then
    echo "ERROR: nvidia-gpu-exporter binary is not working properly"
    exit 1
  fi
  
  # Start the service in background and capture PID
  /usr/local/bin/nvidia-gpu-exporter --web.listen-address=":$PORT" $EXTRA_ARGS > /var/log/nvidia-gpu-exporter.log 2>&amp;1 &amp;
  SERVICE_PID=$!
  
  # Wait a moment and check if process is still alive
  sleep 2
  
  if kill -0 $SERVICE_PID 2>/dev/null; then
    # Double check by testing the port
    sleep 3
    if netstat -tlnp 2>/dev/null | grep ":$PORT " > /dev/null; then
      echo "NVIDIA GPU Exporter started successfully"
      echo "PID: $SERVICE_PID"
      echo "Port: $PORT is now listening"
      echo "Log output:"
      tail -5 /var/log/nvidia-gpu-exporter.log
    else
      echo "Process started but port is not listening. Check logs:"
      cat /var/log/nvidia-gpu-exporter.log
    fi
  else
    echo "Process failed to start or crashed immediately"
    echo "Error log:"
    cat /var/log/nvidia-gpu-exporter.log
  fi
else
  echo "NVIDIA GPU Exporter is disabled"
fi
</INLINE>
</FILE>

<FILE Name="&emhttp;/scripts/stop" Mode="0755">
<INLINE>
#!/bin/bash
echo "Stopping NVIDIA GPU Exporter..."
pkill -f "nvidia-gpu-exporter"
sleep 2
if pgrep -f "nvidia-gpu-exporter" > /dev/null; then
  echo "Force killing NVIDIA GPU Exporter..."
  pkill -9 -f "nvidia-gpu-exporter"
fi
echo "NVIDIA GPU Exporter stopped"
</INLINE>
</FILE>

<FILE Name="&emhttp;/scripts/status" Mode="0755">
<INLINE>
#!/bin/bash
plugin="nvidia-gpu-exporter"
cfg="/boot/config/plugins/$plugin/nvidia-gpu-exporter.cfg"

if [ -f "$cfg" ]; then
  source "$cfg"
else
  echo "Configuration file not found"
  exit 1
fi

if pgrep -f "nvidia-gpu-exporter" > /dev/null; then
  echo "<div style='color: green;'><b>Status:</b> NVIDIA GPU Exporter is running</div>"
  echo "<div><b>Port:</b> $PORT</div>"
  echo "<div><b>Metrics URL:</b> <a href='http://$(hostname):$PORT/metrics' target='_blank'>http://$(hostname):$PORT/metrics</a></div>"
  echo "<div><b>PID:</b> $(pgrep -f nvidia-gpu-exporter)</div>"
else
  echo "<div style='color: red;'><b>Status:</b> NVIDIA GPU Exporter is not running</div>"
fi

if [ -f "/var/log/nvidia-gpu-exporter.log" ]; then
  echo "<div style='margin-top: 10px;'><b>Last log entries:</b></div>"
  echo "<pre style='background: #f0f0f0; padding: 10px; font-size: 12px; max-height: 200px; overflow-y: auto;'>"
  tail -20 /var/log/nvidia-gpu-exporter.log
  echo "</pre>"
fi
</INLINE>
</FILE>

<!--
Install CSS for web interface
-->
<FILE Name="&emhttp;/nvidia-gpu-exporter.css">
<INLINE>
/* High contrast dark theme for NVIDIA GPU Exporter */
.icon {
  width: 32px;
  height: 32px;
  vertical-align: middle;
  margin-right: 10px;
}

#title {
  margin-bottom: 20px;
  font-size: 18px;
  font-weight: bold;
  color: #ffffff !important;
}

#status {
  margin-top: 20px;
  padding: 15px;
  border: 1px solid #666;
  border-radius: 5px;
  background-color: #1a1a1a !important;
  color: #ffffff !important;
}

.prerequisites {
  margin-bottom: 20px;
  padding: 15px;
  border: 1px solid #666;
  border-radius: 5px;
  background-color: #1a1a1a !important;
  color: #ffffff !important;
}

.prerequisites h3 {
  margin-top: 0;
  color: #ffffff !important;
}

.status-item {
  margin: 8px 0;
  display: flex;
  align-items: center;
  color: #ffffff !important;
}

.status-label {
  font-weight: bold;
  min-width: 180px;
  margin-right: 10px;
  color: #ffffff !important;
}

.status-value {
  color: #dddddd !important;
}

.status-ok {
  color: #00ff00 !important;
  font-weight: bold;
}

.status-error {
  color: #ff4444 !important;
  font-weight: bold;
}

.warning {
  background-color: #333300 !important;
  border: 1px solid #666600 !important;
  color: #ffff00 !important;
  padding: 10px;
  border-radius: 4px;
  margin-top: 10px;
}

.error {
  background-color: #330000 !important;
  border: 1px solid #660000 !important;
  color: #ff6666 !important;
  padding: 10px;
  border-radius: 4px;
  margin: 10px 0;
}

.success {
  background-color: #003300 !important;
  border: 1px solid #006600 !important;
  color: #66ff66 !important;
  padding: 10px;
  border-radius: 4px;
  margin: 10px 0;
}

.loading {
  text-align: center;
  color: #ffffff !important;
  font-style: italic;
}

.status-container {
  margin-bottom: 15px;
  background-color: #1a1a1a !important;
  padding: 10px;
  border-radius: 5px;
  border: 1px solid #666;
  color: #ffffff !important;
}

.log-container {
  margin-top: 15px;
}

.log-container h4 {
  margin-bottom: 10px;
  color: #ffffff !important;
}

.log-content {
  background: #000000 !important;
  border: 1px solid #666;
  padding: 10px;
  font-size: 12px;
  max-height: 200px;
  overflow-y: auto;
  white-space: pre-wrap;
  font-family: 'Courier New', monospace;
  color: #00ff00 !important;
}

#service-options {
  margin-top: 15px;
  padding: 15px;
  background-color: #1a1a1a !important;
  border: 1px solid #666;
  border-radius: 5px;
  color: #ffffff !important;
}

input[type="number"], input[type="text"], select {
  padding: 5px;
  border: 1px solid #666 !important;
  border-radius: 3px;
  background-color: #000000 !important;
  color: #ffffff !important;
}

input[type="submit"], input[type="button"] {
  margin-right: 10px;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  color: #ffffff !important;
}

input[type="submit"] {
  background-color: #0066cc !important;
}

input[type="button"] {
  background-color: #666666 !important;
}

input[type="submit"]:hover, input[type="button"]:hover {
  opacity: 0.8;
}

#port-status {
  margin-left: 10px;
  font-size: 12px;
  color: #ffffff !important;
}

/* Universal text visibility overrides for Unraid */
*, *::before, *::after {
  color: #ffffff !important;
}

form *, dt, dd, small, span, div, p, td, th, label {
  color: #ffffff !important;
}

strong, b {
  color: #ffffff !important;
}

a {
  color: #66ccff !important;
}

a:hover {
  color: #99ddff !important;
}

/* Force visibility for all text elements */
.content *, .panel *, .section * {
  color: #ffffff !important;
}
</INLINE>
</FILE>

<!--
Copy plugin icon
-->
<FILE Name="&emhttp;/nvidia_exporter.png">
<LOCAL>&gitURL;/nvidia_exporter.png</LOCAL>
</FILE>

<!--
Install go script
-->
<FILE Name="&plugin;/nvidia-gpu-exporter.sh" Mode="0755">
<INLINE>
#!/bin/bash
plugin="nvidia-gpu-exporter"
cfg="/boot/config/plugins/$plugin/nvidia-gpu-exporter.cfg"

if [ -f "$cfg" ]; then
  source "$cfg"
  if [ "$SERVICE" = "enable" ]; then
    /usr/local/emhttp/plugins/$plugin/scripts/start
  fi
fi
</INLINE>
</FILE>

<!--
Auto-start service if enabled
-->
<FILE Run="/bin/bash" Method="install">
<INLINE>
# Add to Unraid's go script for auto-start
if ! grep -q "nvidia-gpu-exporter.sh" /boot/config/go; then
  echo "" >> /boot/config/go
  echo "# Start NVIDIA GPU Exporter" >> /boot/config/go
  echo "/boot/config/plugins/nvidia-gpu-exporter/nvidia-gpu-exporter.sh" >> /boot/config/go
fi

echo "NVIDIA GPU Exporter plugin installation completed successfully!"
echo "Navigate to Settings -> NVIDIA GPU Exporter to configure and start the service."
</INLINE>
</FILE>

<!--
Remove plugin
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
echo "Removing NVIDIA GPU Exporter plugin..."

# Stop the service
pkill -f "nvidia-gpu-exporter" 2>/dev/null

# Remove from go script
sed -i '/nvidia-gpu-exporter/d' /boot/config/go 2>/dev/null

# Remove files
rm -rf &plugin;
rm -rf &emhttp;
rm -f /usr/local/bin/nvidia-gpu-exporter
rm -f /var/log/nvidia-gpu-exporter.log

echo "NVIDIA GPU Exporter plugin removed successfully!"
</INLINE>
</FILE>

</PLUGIN>