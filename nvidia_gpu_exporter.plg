<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name      "nvidia_gpu_exporter">
  <!ENTITY author    "maclucky">
  <!ENTITY version   "1.3.2">
  <!ENTITY launch    "Settings/nvidia_gpu_exporter">
  <!ENTITY gitURL    "https://github.com/maclucky/nvidia-gpu-exporter-plugin">
  <!ENTITY pluginURL "&gitURL;/raw/main/nvidia_gpu_exporter.plg">
]>

<PLUGIN name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" icon="nvidia_exporter.png" min="6.11.0">

<CHANGES>
##NVIDIA GPU Exporter

###2024.01.15
- Initial Release
- NVIDIA GPU metrics exporter for Prometheus
- Basic configuration interface
- Service management controls
</CHANGES>

<!--
Install the plugin archive.
-->
<FILE Run="/bin/bash">
<INLINE>
VERSION="1.2.2"
ARCHIVE_PATH="/boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter-${VERSION}-linux-amd64.tar.gz"

# Create plugin directory
mkdir -p /boot/config/plugins/nvidia_gpu_exporter

# Download if not exists
if [ ! -f "$ARCHIVE_PATH" ]; then
    echo "Downloading nvidia_gpu_exporter v${VERSION}..."
    wget -O "$ARCHIVE_PATH" "https://github.com/prometheus/nvidia_gpu_exporter/releases/download/v${VERSION}/nvidia_gpu_exporter-${VERSION}.linux-amd64.tar.gz"
    if [ $? -ne 0 ]; then
        echo "Error: Failed to download nvidia_gpu_exporter"
        exit 1
    fi
fi

echo "Archive downloaded successfully"
</INLINE>
</FILE>

<!--
Install default configuration file
-->
<FILE Name="/boot/config/plugins/&name;/&name;.cfg">
<INLINE>
SERVICE="enable"
PORT="9835"
NVIDIASMI="/usr/bin/nvidia-smi"
QUERYFIELDS="AUTO"
LOGFILE="/var/log/nvidia_gpu_exporter.log"
</INLINE>
</FILE>

<!--
Service file for controlling the daemon
-->
<FILE Name="/etc/rc.d/rc.&name;" Mode="0755">
<INLINE>
#!/bin/bash
# Start/stop/restart nvidia_gpu_exporter

. /boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg

case "$1" in
  'start')
    if [ "$SERVICE" == "enable" ]; then
      echo "Starting NVIDIA GPU Exporter..."
      # Check if nvidia-smi is available
      if ! command -v nvidia-smi &> /dev/null && [ "$NVIDIASMI" == "/usr/bin/nvidia-smi" ]; then
        echo "nvidia-smi not found. Please install NVIDIA drivers first."
        exit 1
      fi
      
      # Start the exporter
      /usr/local/bin/nvidia_gpu_exporter \
        --web.listen-address=":$PORT" \
        --nvidia-smi-command="$NVIDIASMI" \
        --query-field-names="$QUERYFIELDS" \
        >> "$LOGFILE" 2>&1 &
      
      echo $! > /var/run/nvidia_gpu_exporter.pid
      echo "NVIDIA GPU Exporter started on port $PORT"
    fi
    ;;
  'stop')
    echo "Stopping NVIDIA GPU Exporter..."
    if [ -f /var/run/nvidia_gpu_exporter.pid ]; then
      kill $(cat /var/run/nvidia_gpu_exporter.pid) 2>/dev/null
      rm -f /var/run/nvidia_gpu_exporter.pid
    fi
    killall nvidia_gpu_exporter 2>/dev/null
    echo "NVIDIA GPU Exporter stopped"
    ;;
  'restart')
    $0 stop
    sleep 1
    $0 start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart}"
    exit 1
esac
</INLINE>
</FILE>

<!--
Install service control script
-->
<FILE Name="/usr/local/emhttp/plugins/&name;/scripts/service_control.php">
<INLINE>
<?php
if ($_POST['action']) {
    $action = $_POST['action'];
    switch($action) {
        case 'start':
            exec('/etc/rc.d/rc.nvidia_gpu_exporter start', $output, $return_var);
            break;
        case 'stop':
            exec('/etc/rc.d/rc.nvidia_gpu_exporter stop', $output, $return_var);
            break;
        case 'restart':
            exec('/etc/rc.d/rc.nvidia_gpu_exporter restart', $output, $return_var);
            break;
        default:
            echo "Invalid action";
            exit(1);
    }
    echo implode("\n", $output);
}
?>
</INLINE>
</FILE>

<!--
Install metrics proxy script
-->
<FILE Name="/usr/local/emhttp/plugins/&name;/scripts/get_metrics.php">
<INLINE>
<?php
$cfg = parse_ini_file("/boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter.cfg");
$port = isset($cfg['PORT']) ? $cfg['PORT'] : '9835';
$url = "http://localhost:$port/metrics";

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 5);
curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2);

$response = curl_exec($ch);
$http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($http_code == 200 && $response !== false) {
    echo $response;
} else {
    echo "Error: Unable to fetch metrics from localhost:$port/metrics";
}
?>
</INLINE>
</FILE>

<!--
Install web interface page descriptor
-->
<FILE Name="/usr/local/emhttp/plugins/&name;/&name;.page">
<INLINE>
Menu="Settings"
Title="NVIDIA GPU Exporter"
Icon="nvidia_exporter.png"
---
</INLINE>
</FILE>

<!--
Install web interface PHP page
-->
<FILE Name="/usr/local/emhttp/plugins/&name;/&name;.php">
<INLINE>
<?php
$plugin = "nvidia_gpu_exporter";
$cfg = parse_ini_file("/boot/config/plugins/$plugin/$plugin.cfg");

// Set defaults if config file doesn't exist or values are missing
if (!$cfg) {
    $cfg = array();
}
$cfg['SERVICE'] = isset($cfg['SERVICE']) ? $cfg['SERVICE'] : 'enable';
$cfg['PORT'] = isset($cfg['PORT']) ? $cfg['PORT'] : '9835';
$cfg['NVIDIASMI'] = isset($cfg['NVIDIASMI']) ? $cfg['NVIDIASMI'] : '/usr/bin/nvidia-smi';
$cfg['QUERYFIELDS'] = isset($cfg['QUERYFIELDS']) ? $cfg['QUERYFIELDS'] : 'AUTO';

$service_running = trim(shell_exec("ps aux | grep '[n]vidia_gpu_exporter' | wc -l")) > 0;
$pid_file = "/var/run/nvidia_gpu_exporter.pid";
$service_pid = file_exists($pid_file) ? trim(file_get_contents($pid_file)) : "";
?>

<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="/boot/config/plugins/<?=$plugin?>/<?=$plugin?>.cfg">

Service Status:
: <span class="<?=($service_running ? 'green-text' : 'red-text')?>"><?=($service_running ? 'Running' : 'Stopped')?></span>
  <?php if($service_running && $service_pid): ?>
  (PID: <?=$service_pid?>)
  <?php endif; ?>

Enable Service:
: <select name="SERVICE" size="1">
  <?=mk_option($cfg['SERVICE'], "disable", "No");?>
  <?=mk_option($cfg['SERVICE'], "enable", "Yes");?>
  </select>

Port:
: <input type="number" name="PORT" min="1024" max="65535" value="<?=htmlspecialchars($cfg['PORT'])?>" class="narrow">
  <blockquote class="inline_help">
  <p>Port for the metrics endpoint (default: 9835)</p>
  </blockquote>

NVIDIA SMI Path:
: <input type="text" name="NVIDIASMI" value="<?=htmlspecialchars($cfg['NVIDIASMI'])?>" class="wide">
  <blockquote class="inline_help">
  <p>Path to nvidia-smi binary (default: /usr/bin/nvidia-smi)</p>
  </blockquote>

Query Fields:
: <select name="QUERYFIELDS" size="1">
  <?=mk_option($cfg['QUERYFIELDS'], "AUTO", "Auto-detect");?>
  <?=mk_option($cfg['QUERYFIELDS'], "uuid,name,temperature.gpu,utilization.gpu,utilization.memory,memory.total,memory.free,memory.used", "Basic");?>
  <?=mk_option($cfg['QUERYFIELDS'], "uuid,name,temperature.gpu,fan.speed,utilization.gpu,utilization.memory,memory.total,memory.free,memory.used,clocks.current.graphics,clocks.current.memory,power.draw", "Extended");?>
  </select>
  <blockquote class="inline_help">
  <p>Fields to query from nvidia-smi. AUTO will auto-detect available fields.</p>
  </blockquote>

&nbsp;
: <input type="submit" value="Apply"><input type="button" value="Done" onclick="done()">
</form>

<script>
function done(){
  parent.parent.Shadowbox.close();
}
</script>

## Service Control

**Status:** <span id="service-status"><?=($service_running ? 'Running' : 'Stopped')?></span>

<input type="button" value="Start" onclick="serviceControl('start')" <?=($service_running ? 'disabled' : '')?>>
<input type="button" value="Stop" onclick="serviceControl('stop')" <?=(!$service_running ? 'disabled' : '')?>>
<input type="button" value="Restart" onclick="serviceControl('restart')">

<?php if($service_running): ?>
## Metrics Preview
<?php 
$hostname = $_SERVER['HTTP_HOST'] ?: $_SERVER['SERVER_NAME'] ?: 'localhost';
$metrics_url = "http://$hostname:{$cfg['PORT']}/metrics";
?>
Access the metrics at: <a href="<?=$metrics_url?>" target="_blank"><?=$metrics_url?></a>

<pre id="metrics-preview" style="height: 200px; overflow-y: scroll; background: #f5f5f5; padding: 10px; color: #333; font-family: monospace; font-size: 12px;">
Loading metrics...
</pre>
<?php endif; ?>

<script>
function serviceControl(action) {
  // Disable all buttons during operation
  $('input[type="button"]').prop('disabled', true);
  $('#service-status').text('Processing...');
  
  $.post('/plugins/nvidia_gpu_exporter/scripts/service_control.php', {action: action})
    .done(function(data) {
      console.log('Service ' + action + ' output:', data);
      setTimeout(function() {
        location.reload();
      }, 2000);
    })
    .fail(function(xhr, status, error) {
      console.error('Service control failed:', error);
      alert('Failed to ' + action + ' service: ' + error);
      setTimeout(function() {
        location.reload();
      }, 1000);
    });
}

<?php if($service_running): ?>
// Load metrics preview using server-side proxy
$.get('/plugins/nvidia_gpu_exporter/scripts/get_metrics.php')
  .done(function(data) {
    $('#metrics-preview').text(data.substring(0, 2000) + (data.length > 2000 ? '\n... (truncated)' : ''));
  })
  .fail(function(xhr, status, error) {
    $('#metrics-preview').text('Unable to fetch metrics. Service may not be running or port may be incorrect.');
    console.error('Metrics fetch failed:', status, error);
  });
<?php endif; ?>
</script>
</INLINE>
</FILE>

<!--
Install plugin icon
-->
<FILE Name="/usr/local/emhttp/plugins/&name;/images/nvidia_exporter.png" Type="base64">
<INLINE>
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
</INLINE>
</FILE>

<!--
Install binary to system location
-->
<FILE Run="/bin/bash">
<INLINE>
# Extract and install the binary
echo "Installing NVIDIA GPU Exporter v&version;..."

ARCHIVE_PATH="/boot/config/plugins/nvidia_gpu_exporter/nvidia_gpu_exporter-&version;-linux-amd64.tar.gz"
cd /tmp
tar -xzf "$ARCHIVE_PATH"

# The tar file contains the binary directly
if [ -f "nvidia_gpu_exporter" ]; then
    cp nvidia_gpu_exporter /usr/local/bin/
elif [ -f "nvidia_gpu_exporter_&version;_linux_x86_64/nvidia_gpu_exporter" ]; then
    cp nvidia_gpu_exporter_&version;_linux_x86_64/nvidia_gpu_exporter /usr/local/bin/
else
    # Find the binary file
    BINARY_FILE=$(find . -name "nvidia_gpu_exporter" -type f | head -1)
    if [ -n "$BINARY_FILE" ]; then
        cp "$BINARY_FILE" /usr/local/bin/
    else
        echo "Error: nvidia_gpu_exporter binary not found in archive"
        exit 1
    fi
fi

chmod +x /usr/local/bin/nvidia_gpu_exporter

# Verify installation
if [ ! -f "/usr/local/bin/nvidia_gpu_exporter" ]; then
    echo "Error: Failed to install nvidia_gpu_exporter binary"
    exit 1
fi

echo "Binary installed successfully"

# Create directories
mkdir -p /var/log
mkdir -p /usr/local/emhttp/plugins/nvidia_gpu_exporter
mkdir -p /usr/local/emhttp/plugins/nvidia_gpu_exporter/images
mkdir -p /usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts

# Set proper permissions
chmod 755 /usr/local/emhttp/plugins/nvidia_gpu_exporter
chmod 644 /usr/local/emhttp/plugins/nvidia_gpu_exporter/*.page 2>/dev/null || true
chmod 644 /usr/local/emhttp/plugins/nvidia_gpu_exporter/images/*.png 2>/dev/null || true
chmod 644 /usr/local/emhttp/plugins/nvidia_gpu_exporter/scripts/*.php 2>/dev/null || true

# Clean up
rm -rf /tmp/nvidia_gpu_exporter*

echo "NVIDIA GPU Exporter plugin installed successfully"
echo "Please refresh your browser and navigate to Settings > NVIDIA GPU Exporter"
</INLINE>
</FILE>

<!--
The 'remove' script
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
# Stop and disable service
/etc/rc.d/rc.nvidia_gpu_exporter stop

# Remove installed files
rm -f /usr/local/bin/nvidia_gpu_exporter
rm -f /etc/rc.d/rc.nvidia_gpu_exporter
rm -rf /boot/config/plugins/nvidia_gpu_exporter

# Remove web interface files
rm -rf /usr/local/emhttp/plugins/nvidia_gpu_exporter

echo "NVIDIA GPU Exporter plugin removed successfully"
</INLINE>
</FILE>

</PLUGIN>
