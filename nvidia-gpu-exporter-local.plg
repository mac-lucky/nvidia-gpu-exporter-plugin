<?xml version='1.0' standalone='yes'?>
<!DOCTYPE PLUGIN [
  <!ENTITY name      "nvidia-gpu-exporter">
  <!ENTITY author    "mac-lucky">
  <!ENTITY version   "1.3.2">
  <!ENTITY launch    "Settings/NvidiaGpuExporter">
  <!ENTITY pluginURL "">
  <!ENTITY pkgURL    "https://github.com/utkuozdemir/nvidia_gpu_exporter/releases/download/v1.3.2/nvidia_gpu_exporter_1.3.2_linux_x86_64.tar.gz">
  <!ENTITY md5       "">
]>

<PLUGIN  name="&name;" author="&author;" version="&version;" launch="&launch;" pluginURL="&pluginURL;" min="6.8.0">

<DESCRIPTION>
NVIDIA GPU Exporter for Prometheus monitoring. Exposes NVIDIA GPU metrics including utilization, memory usage, temperature, and power consumption. Simple start/stop/restart controls via web interface.
</DESCRIPTION>

<CHANGES>
###2025.01.16
- Initial release
- Simple start/stop/restart functionality for nvidia_gpu_exporter
- Web interface with control buttons
- Automatic binary download and installation
</CHANGES>

<!-- The 'pre-install' script. -->
<FILE Run="/bin/bash">
<INLINE>
# Remove old 'source' files
rm -f $(ls /boot/config/plugins/&name;/&name;*.txz 2>/dev/null)
</INLINE>
</FILE>

<!-- The 'source' file. -->
<FILE Name="/boot/config/plugins/&name;/&name;-&version;.txz" Run="upgradepkg --install-new">
<URL>&pkgURL;</URL>
<MD5>&md5;</MD5>
</FILE>

<!-- Control script -->
<FILE Name="/etc/rc.d/rc.nvidia-gpu-exporter" Mode="0755">
<INLINE>
#!/bin/bash
# Control script for nvidia-gpu-exporter

DAEMON="nvidia_gpu_exporter"
PIDFILE="/var/run/nvidia-gpu-exporter.pid"
DAEMON_PATH="/usr/local/bin/nvidia_gpu_exporter"
DAEMON_ARGS="--web.listen-address=:9835"

start_nvidia_gpu_exporter() {
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        if kill -0 $PID > /dev/null 2>&1; then
            echo "nvidia-gpu-exporter is already running (PID: $PID)"
            return 1
        else
            rm -f $PIDFILE
        fi
    fi
    
    echo "Starting nvidia-gpu-exporter..."
    nohup $DAEMON_PATH $DAEMON_ARGS > /var/log/nvidia-gpu-exporter.log 2>&1 &
    echo $! > $PIDFILE
    echo "nvidia-gpu-exporter started (PID: $(cat $PIDFILE))"
}

stop_nvidia_gpu_exporter() {
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        if kill -0 $PID > /dev/null 2>&1; then
            echo "Stopping nvidia-gpu-exporter (PID: $PID)..."
            kill $PID
            sleep 2
            if kill -0 $PID > /dev/null 2>&1; then
                echo "Force killing nvidia-gpu-exporter..."
                kill -9 $PID
            fi
            rm -f $PIDFILE
            echo "nvidia-gpu-exporter stopped"
        else
            echo "nvidia-gpu-exporter is not running"
            rm -f $PIDFILE
        fi
    else
        echo "nvidia-gpu-exporter is not running"
    fi
}

status_nvidia_gpu_exporter() {
    if [ -f $PIDFILE ]; then
        PID=$(cat $PIDFILE)
        if kill -0 $PID > /dev/null 2>&1; then
            echo "nvidia-gpu-exporter is running (PID: $PID)"
            return 0
        else
            echo "nvidia-gpu-exporter is not running"
            rm -f $PIDFILE
            return 1
        fi
    else
        echo "nvidia-gpu-exporter is not running"
        return 1
    fi
}

case "$1" in
    start)
        start_nvidia_gpu_exporter
        ;;
    stop)
        stop_nvidia_gpu_exporter
        ;;
    restart)
        stop_nvidia_gpu_exporter
        sleep 2
        start_nvidia_gpu_exporter
        ;;
    status)
        status_nvidia_gpu_exporter
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1
        ;;
esac

exit 0
</INLINE>
</FILE>

<!-- Web interface page -->
<FILE Name="/usr/local/emhttp/plugins/&name;/NvidiaGpuExporter.page">
<INLINE>
<![CDATA[
<?PHP
/* Copyright 2025, mac-lucky.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = "nvidia-gpu-exporter";
$docroot = $docroot ?? $_SERVER['DOCUMENT_ROOT'] ?: '/usr/local/emhttp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/webGui/include/Helpers.php";
if ($translations) {
  $_SERVER['REQUEST_URI'] = 'settings';
  require_once "$docroot/webGui/include/Translations.php";
} else {
  // legacy support (without javascript)
  $noscript = true;
  require_once "$docroot/webGui/include/Legacy.php";
}
?>

<script>
$(function() {
    // Load initial status
    loadStatus();
    
    // Set up auto-refresh every 5 seconds
    setInterval(loadStatus, 5000);
});

function loadStatus() {
    $('#status-indicator').load('/plugins/nvidia-gpu-exporter/include/status.php');
}

function serviceCommand(action) {
    $.post('/plugins/nvidia-gpu-exporter/include/service.php', {action: action}, function(data) {
        setTimeout(loadStatus, 1000);
        if (data.trim()) {
            $('#output').html('<pre>' + data + '</pre>').show();
            setTimeout(function() {
                $('#output').fadeOut();
            }, 3000);
        }
    });
}
</script>

<style>
.nvidia-status {
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
}
.status-running {
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    color: #155724;
}
.status-stopped {
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    color: #721c24;
}
.nvidia-buttons {
    margin: 10px 0;
}
.nvidia-buttons button {
    margin-right: 10px;
    padding: 8px 16px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}
.btn-start {
    background-color: #28a745;
    color: white;
}
.btn-stop {
    background-color: #dc3545;
    color: white;
}
.btn-restart {
    background-color: #ffc107;
    color: black;
}
#output {
    margin-top: 10px;
    display: none;
}
</style>

<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="nvidia-gpu-exporter/nvidia-gpu-exporter.cfg">

# NVIDIA GPU Exporter

This plugin provides NVIDIA GPU metrics exporter for Prometheus monitoring.

**Current Status:**
<div id="status-indicator">Loading...</div>

**Service Control:**
<div class="nvidia-buttons">
    <button type="button" class="btn-start" onclick="serviceCommand('start')">Start</button>
    <button type="button" class="btn-stop" onclick="serviceCommand('stop')">Stop</button>
    <button type="button" class="btn-restart" onclick="serviceCommand('restart')">Restart</button>
</div>

<div id="output"></div>

**Information:**
- **Service Port:** 9835
- **Metrics URL:** http://[SERVER_IP]:9835/metrics
- **Log File:** /var/log/nvidia-gpu-exporter.log

**Description:**
The NVIDIA GPU Exporter collects NVIDIA GPU metrics and exposes them in Prometheus format. 
This allows monitoring of GPU utilization, memory usage, temperature, and other important metrics.

To use with Prometheus, add the following to your prometheus.yml:
```
scrape_configs:
  - job_name: 'nvidia-gpu'
    static_configs:
      - targets: ['unraid-server:9835']
```

**Requirements:**
- NVIDIA GPU with driver installed
- nvidia-ml-py library (automatically installed)

Done
</form>

<script type="text/javascript">
function done() {
    // Reload status after form submission
    setTimeout(loadStatus, 1000);
}
</script>
]]>
</INLINE>
</FILE>

<!-- Status check script -->
<FILE Name="/usr/local/emhttp/plugins/&name;/include/status.php">
<INLINE>
<![CDATA[
<?php
// Status check script
$pidfile = '/var/run/nvidia-gpu-exporter.pid';

if (file_exists($pidfile)) {
    $pid = trim(file_get_contents($pidfile));
    if ($pid && posix_kill($pid, 0)) {
        echo '<div class="nvidia-status status-running">';
        echo '<strong>Status:</strong> Running (PID: ' . $pid . ')';
        echo '</div>';
    } else {
        echo '<div class="nvidia-status status-stopped">';
        echo '<strong>Status:</strong> Stopped';
        echo '</div>';
        if (file_exists($pidfile)) {
            unlink($pidfile);
        }
    }
} else {
    echo '<div class="nvidia-status status-stopped">';
    echo '<strong>Status:</strong> Stopped';
    echo '</div>';
}
?>
]]>
</INLINE>
</FILE>

<!-- Service control script -->
<FILE Name="/usr/local/emhttp/plugins/&name;/include/service.php">
<INLINE>
<![CDATA[
<?php
// Service control script
if ($_POST['action']) {
    $action = $_POST['action'];
    
    // Validate action
    $allowed_actions = ['start', 'stop', 'restart', 'status'];
    if (!in_array($action, $allowed_actions)) {
        echo "Invalid action";
        exit;
    }
    
    // Execute the control script
    $output = shell_exec("/etc/rc.d/rc.nvidia-gpu-exporter $action 2>&1");
    echo $output;
}
?>
]]>
</INLINE>
</FILE>

<!-- The 'post-install' script -->
<FILE Run="/bin/bash">
<INLINE>
# Extract the binary
cd /boot/config/plugins/&name;
tar -xzf &name;-&version;.txz
chmod +x nvidia_gpu_exporter

# Create symlink in /usr/local/bin
ln -sf /boot/config/plugins/&name;/nvidia_gpu_exporter /usr/local/bin/nvidia_gpu_exporter

# Create config directory
mkdir -p /boot/config/plugins/&name;

echo ""
echo "----------------------------------------------------"
echo " &name; has been installed."
echo " Copyright 2025, &author;"
echo " Version: &version;"
echo "----------------------------------------------------"
echo ""
</INLINE>
</FILE>

<!-- The 'remove' script. -->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
# Stop the service
/etc/rc.d/rc.nvidia-gpu-exporter stop 2>/dev/null

# Remove symlink
rm -f /usr/local/bin/nvidia_gpu_exporter

# Remove plugin files
rm -rf /boot/config/plugins/&name;

# Remove web interface files
rm -rf /usr/local/emhttp/plugins/&name;

# Remove control script
rm -f /etc/rc.d/rc.nvidia-gpu-exporter

echo ""
echo "-----------------------------------------------------------"
echo " &name; has been removed."
echo " Copyright 2025, &author;"
echo " Version: &version;"
echo "-----------------------------------------------------------"
echo ""
</INLINE>
</FILE>

</PLUGIN>
